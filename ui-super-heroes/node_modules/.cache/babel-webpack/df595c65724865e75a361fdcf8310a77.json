{"ast":null,"code":"/**\n * Fight API\n * This API allows a hero and a villain to fight\n *\n * OpenAPI spec version: 1.0\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\nimport { EventEmitter } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { BASE_PATH } from '../variables';\nimport { Configuration } from '../configuration';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../configuration\";\nexport let FightService = /*#__PURE__*/(() => {\n  class FightService {\n    constructor(httpClient, basePath, configuration) {\n      this.httpClient = httpClient; //protected basePath = 'http://rest-fights:8082';\n\n      this.basePath = 'http://rest-fights-odo-learning.apps.cluster-6m667.6m667.sandbox1517.opentlc.com';\n      this.defaultHeaders = new HttpHeaders();\n      this.configuration = new Configuration();\n      this.emitter = new EventEmitter();\n\n      if (basePath) {\n        this.basePath = basePath;\n      }\n\n      if (!window.location.host.includes(\"localhost\")) {\n        this.basePath = window.location.protocol + \"//\" + window.location.host;\n      }\n\n      if (configuration) {\n        this.configuration = configuration;\n        this.basePath = basePath || configuration.basePath || this.basePath;\n      }\n    }\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n\n\n    canConsumeForm(consumes) {\n      const form = 'multipart/form-data';\n\n      for (const consume of consumes) {\n        if (form === consume) {\n          return true;\n        }\n      }\n\n      return false;\n    } // end::adocService[]\n\n\n    apiFightsGet(observe = 'body', reportProgress = false) {\n      let headers = this.defaultHeaders; // to determine the Accept header\n\n      let httpHeaderAccepts = ['application/json'];\n      const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n\n      if (httpHeaderAcceptSelected != undefined) {\n        headers = headers.set('Accept', httpHeaderAcceptSelected);\n      } // to determine the Content-Type header\n\n\n      const consumes = [];\n      return this.httpClient.get(`${this.basePath}/api/fights`, {\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    apiFightsHelloGet(observe = 'body', reportProgress = false) {\n      let headers = this.defaultHeaders; // to determine the Accept header\n\n      let httpHeaderAccepts = ['text/plain'];\n      const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n\n      if (httpHeaderAcceptSelected != undefined) {\n        headers = headers.set('Accept', httpHeaderAcceptSelected);\n      } // to determine the Content-Type header\n\n\n      const consumes = [];\n      return this.httpClient.get(`${this.basePath}/api/fights/hello`, {\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    apiFightsIdGet(id, observe = 'body', reportProgress = false) {\n      if (id === null || id === undefined) {\n        throw new Error('Required parameter id was null or undefined when calling apiFightsIdGet.');\n      }\n\n      let headers = this.defaultHeaders; // to determine the Accept header\n\n      let httpHeaderAccepts = ['application/json'];\n      const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n\n      if (httpHeaderAcceptSelected != undefined) {\n        headers = headers.set('Accept', httpHeaderAcceptSelected);\n      } // to determine the Content-Type header\n\n\n      const consumes = [];\n      return this.httpClient.get(`${this.basePath}/api/fights/${encodeURIComponent(String(id))}`, {\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    onNewFight(fight) {\n      this.emitter.emit(fight);\n    }\n\n    apiFightsPost(body, observe = 'body', reportProgress = false) {\n      if (body === null || body === undefined) {\n        throw new Error('Required parameter body was null or undefined when calling apiFightsPost.');\n      }\n\n      let headers = this.defaultHeaders; // to determine the Accept header\n\n      let httpHeaderAccepts = ['application/json'];\n      const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n\n      if (httpHeaderAcceptSelected != undefined) {\n        headers = headers.set('Accept', httpHeaderAcceptSelected);\n      } // to determine the Content-Type header\n\n\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n      if (httpContentTypeSelected != undefined) {\n        headers = headers.set('Content-Type', httpContentTypeSelected);\n      }\n\n      return this.httpClient.post(`${this.basePath}/api/fights`, body, {\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    } // end::adocService[]\n\n\n    apiFightsRandomfightersGet(observe = 'body', reportProgress = false) {\n      let headers = this.defaultHeaders; // to determine the Accept header\n\n      let httpHeaderAccepts = ['application/json'];\n      const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n\n      if (httpHeaderAcceptSelected != undefined) {\n        headers = headers.set('Accept', httpHeaderAcceptSelected);\n      } // to determine the Content-Type header\n\n\n      const consumes = [];\n      return this.httpClient.get(`${this.basePath}/api/fights/randomfighters`, {\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n  }\n\n  FightService.ɵfac = function FightService_Factory(t) {\n    return new (t || FightService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(i2.Configuration, 8));\n  };\n\n  FightService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FightService,\n    factory: FightService.ɵfac\n  });\n  return FightService;\n})();","map":null,"metadata":{},"sourceType":"module"}