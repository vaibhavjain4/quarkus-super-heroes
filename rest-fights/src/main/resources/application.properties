## HTTP configuration
quarkus.http.port=8082

## CORS
quarkus.http.cors=true

## drop and create the database at startup (use `update` to only update the schema)
quarkus.hibernate-orm.database.generation=drop-and-create

## Rest clients
io.quarkus.workshop.superheroes.fight.client.HeroProxy/mp-rest/url=http://rest-heroes:8083
io.quarkus.workshop.superheroes.fight.client.HeroProxy/mp-rest/scope=javax.inject.Singleton
io.quarkus.workshop.superheroes.fight.client.VillainProxy/mp-rest/url=http://rest-villains:8084
io.quarkus.workshop.superheroes.fight.client.VillainProxy/mp-rest/scope=javax.inject.Singleton

process.milliseconds=0

quarkus.micrometer.export.json.enabled=true

## Kafka configuration
kafka.bootstrap.servers=super-heroes-kafka-kafka-bootstrap:9092
mp.messaging.outgoing.fights.connector=smallrye-kafka
mp.messaging.outgoing.fights.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

## Logging configuration
quarkus.log.console.enable=true
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=DEBUG

quarkus.kubernetes-client.trust-certs=true

## Production configuration
%prod.quarkus.datasource.jdbc.url=jdbc:postgresql://fightsdb:5432/fights_database
%prod.quarkus.datasource.db-kind=postgresql
%prod.quarkus.datasource.username=superfight
%prod.quarkus.datasource.password=superfight
%prod.quarkus.hibernate-orm.sql-load-script=import.sql

%prod.quarkus.log.console.level=INFO
%prod.quarkus.hibernate-orm.database.generation=update
